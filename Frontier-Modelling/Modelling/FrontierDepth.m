function classifiers=FrontierDepth(T, layerInfo, alpha, percentile, show, outlier, outlier2)
% classifiers=ColoringRadius(in,show,outlier,outlier2,alpha)
% 
% DESCRIPTION 
%   'FrontierDepth' takes species presence-data(observations) over 
%   a map and generates a niche probability intensity map, by using the
%   depth of each point.
%   Note: sample and point will be used interchangeably, as well as map
%   point and pixel.
%
% REQUIRED INPUTS
%   T: Table given by sampleVS with species samples and information
%   layerInfo: an strcuture generated by 'ReadLayers' function
%   
% OPTIONAL INPUTS
%   alpha: shrinking factor for the boundary, alpha=[0,1]
%   percentile: percentile with which the radius will be taken
%   show: if the boundary and the estimated map will show
%   outlier1: If the outliers are removed before normalization
%   outlier2: a integer with the number of required samples 
% 
% OUTPUTS:
%   classifiers.nodes: An array containing the boundary points with ther
%                       environmental covariates
%   classifiers.index: Indexes in T of the boundary points
%   classifiers.radius: radius of every point to its closest boundary point
%   classifiers.normalizers: normalization coefficients for environmental
%                            covariates
%   classifiers.T: Array of every sample data with their environmental
%                   covariate
%   classifiers.map: Array containing the probability  intensity of species
%                    presence in every map pixel
%%  

% Setting default values for alpha, show, and outlier detection
if nargin <3
    alpha = 0;
end
if nargin <4
    percentile = 0;
end
if nargin <5
    show = false;    
end
if nargin <6
    outlier=false;
end
if nargin <7
    outlier2=false;
end

%preparing initial important data
Z = layerInfo.Z; % Enviromental Info in each point of the map
R = layerInfo.R; % Geographic cells Reference
reps = size(Z); % Size of Z
caps = reps(3); % Number of enviromental variables
template = Z(:, :, 1); % Array of map size
data = NaN(length(template(:)), caps); % 2D Array of the amount of pixels by enviromental variables

% Saves the enviromental variables of each pixel in the 2D array
for i = 1 : caps
    template = Z(:, :, i);
    data(:, i) = template(:);
end

% Determine which pixels of the array are not part of the map
idx = find(~isnan(sum(data, 2))==1);

% Obtain the enviromental information of each sample
points = T{:,4:end};

% Size of all samples
pointSize = length(points(:,1));

% Normalizing the samples enviromental information 
normalizers=[max(data(:,:));min(data(:,:))]; 
points(:,:)=(points(:,:)-normalizers(2,:))./(normalizers(1,:)-normalizers(2,:));

% Normalizing the enviromental information of the map with the samples normalizers
data(idx,:) =  (data(idx,:)-normalizers(2,:))./(normalizers(1,:)-normalizers(2,:));

% Outlier detection before PCA
if outlier
    [~,~,RD,chi_crt]=DetectMultVarOutliers(points(:,:));
    id_out=RD>chi_crt(4);
    out1=points(id_out,:);
    points=points(~id_out,:);
end

%PCA proyection of points
[coeff,~,~,~,explained]=pca(points(:,:));
pin=points(:,:)*coeff(:,1:3);


%outlier detection pos-PCA
if outlier2
    %siz=round(size(pin,1)*0.3);
    [~,~,RD,chi_crt]=DetectMultVarOutliers(pin);
    id_out=RD>chi_crt(4);
    out2=points(id_out,:);
    pin=pin(~id_out,:);
end
% defining the points that make up the frontier/boundary
nodes = boundary(pin(:,1),pin(:,2),pin(:,3),alpha);
boundPointsIndex = unique(nodes)'; %index of the points in T
boundPoints = points(boundPointsIndex,:); % Information of the frontier points
boundPointsSize = length(boundPointsIndex); % Size of the frontier array


% Non-Bound Points 
nonBoundPointsIndex = setdiff(1:pointSize,boundPointsIndex); 
nonBoundPoints = points(nonBoundPointsIndex,:);
nonBoundPointsSize = length(nonBoundPointsIndex); % Amount of samples


% Array of the distance of each point to each frontier point
radius = zeros(nonBoundPointsSize,boundPointsSize); 

% Defining an array for the final map values
map = NaN(reps(1), reps(2));


% Distance from each non-frontier point to each frontier point
for i=1:nonBoundPointsSize
    for j=1:boundPointsSize
        radius(i,j)=norm(boundPoints(j,:)-nonBoundPoints(i,:));
    end
end

% Selecting the sample's radius as the percentile's value of the distances
%radiusClass = prctile(radius,percentile,2);

position = ceil(nonBoundPointsSize*percentile/100);
sortedRadius = sort(radius,2);
radiusClass = sortedRadius(:,position);

% Creating an empty array to determine each pixel's depth
response = NaN(nonBoundPointsSize,1);

% Creating an empty array to determine each pixel's depth
intensity = NaN(1,length(idx));

% Calculating the depth of each map pixel with the radiusClass points
for i=1:length(idx)
    for j=1:nonBoundPointsSize
        response(j) = norm(nonBoundPoints(j,:) - data(idx(i),:));
    end
    intensity(i) = sum(response <= radiusClass)/nonBoundPointsSize;
end

intensity = (intensity - min(intensity))./(max(intensity)-min(intensity));

% Creating an empty array to determine each pixel's intensity
final = NaN(length(template(:)),1);
final(idx)=intensity;

% Going back from a 1d array to a 2d array
map(:) = final(:);

classifiers.nodes = boundPoints;
classifiers.index = nonBoundPointsIndex;
classifiers.radius = radiusClass;
classifiers.normalizers = normalizers;
classifiers.T = T;
classifiers.map = map;
classifiers.explainedPCA = explained;



% Plot the frontier and the coloured map
if show
    trisurf(nodes,pin(:,1),pin(:,2),pin(:,3), 'Facecolor','cyan','FaceAlpha',0.8); axis equal;
    hold on
    plot3(pin(:,1),pin(:,2),pin(:,3),'.r')
    hold off
    

    figure
    clf
    geoshow(map, R, 'DisplayType','surface');
    contourcmap('jet',0:0.05:1, 'colorbar', 'on', 'location', 'vertical')
end